// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)
  authId        String   @unique
  email         String   @unique
  emailVerified Boolean
  name          String?
  picture       String?

  boards      Board[]
  connections UserConnection[] @relation(name: "connections")
  connectedTo UserConnection[] @relation(name: "connectedTo")
  invites     UserInvite[]
  sharedNotes NoteEditor[]
}

model UserConnection {
  userFirstId  String
  userSecondId String
  type         String
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)

  userFirst  User @relation(fields: [userFirstId], references: [id], name: "connections")
  userSecond User @relation(fields: [userSecondId], references: [id], name: "connectedTo")

  @@id([userFirstId, userSecondId])
}

model UserInvite {
  id          String   @id
  friendEmail String
  userId      String
  status      String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id])
}

model Board {
  id        String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  noteOrder String[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  notes     Note[]
}

model Note {
  id        String       @id
  createdAt DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt DateTime     @updatedAt @db.Timestamptz(6)
  text      String       @db.Text /// @encrypted
  textPlain String       @db.Text /// @encrypted
  colour    String?
  boardId   String
  board     Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  editors   NoteEditor[]
}

model NoteEditor {
  id        String   @id
  noteId    String
  userId    String
  selected  Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
